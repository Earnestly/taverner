#!/bin/bash --

# This template uses wine's virtual desktop.

# The command is an array as some programs may take arguments, e.g. foo.exe /S
cmd=()

WINEPREFIX=${XDG_DATA_HOME:-$HOME/.local/share}/wine/foo

# The path to working directory for the executable.
#
# N.B. By default the template assumes the basename of the WINEPREFIX is the
#      same as the path under C:\ to the executable.
#
#      e.g. a WINEPREFIX of '.../wine/foo' becomes 'C:\foo'.
#
#      If instead the executable is under a different directory alter this
#      variable, e.g. path=foo/x86 results in 'C:\foo\x86'.
path=

# Title and resolution passed to wine's Virtual Desktop:
title=window-title
resolution=1920x1080

# Export any environment variables, useful in some cases, e.g. for NVIDIA:
export __GL_THREADED_OPTIMIZATIONS=1

# Or for mesa, to disable vsync:
export vblank_mode=0

# Enable threaded gl dispatch for mesa:
export mesa_glthread=true

# From here on the rest is just script logic based on the above information.
export WINEPREFIX

# Normally no arguments are given to launchers. However it is possible to
# directly invoke them with arguments which can be useful.
#
# For example './foo/run winecfg' with this template can be used to start
# winecfg in the correct WINEPREFIX instead of running the user defined
# command. A small convenience to avoid manually specifying WINEPREFIX.
if [[ $# -gt 0 ]]; then
    cmd=("$@")
fi

wineopts=(explorer /desktop="$title","$resolution")

if CDPATH='' cd -- "$WINEPREFIX"/drive_c/"${path:-${WINEPREFIX##*/}}"; then
    exec wine explorer /desktop="${title// /-}","$resolution" "${cmd[@]}"
fi
