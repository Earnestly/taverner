#!/bin/bash --
# taverner - manage entries for displaying menus with related images
# requires imagemagick curl gawk sort(-z)

shopt -s nullglob

usage() {
    cat <<'!'
usage: taverner [-h] [-e editor] menu [-h] [-f fmt] [-c cmd] [-a arg]... [--] [arguments]...
       taverner [-h] [-e editor] add [-h] [-c cover] [-t template] [-n title] entry
       taverner [-h] [-e editor] edit [-ht] [-c cover] [-n title] entry
       taverner [-h] [-e editor] ls [-ht0]
       taverner [-h] [-e editor] rm [-h] entry...

options
    -e editor  specify editor to use instead of EDITOR (default: vi)

examples
    create an entry called wipeout3 with a psx template using emacs as the
    editor:

        taverner -e emacs add -t psx -c ~/wipeout-3.jpg -n 'Wipeout 3 (PSX 1999)' wipeout-3

    removes both wipeout-3 and crash-bandicoot launchers along with their
    metadata (cover and title):

        taverner rm wipeout-3 crash-bandicoot

    display the menu using standard dmenu in list mode:

        taverner menu -f '%t\n' -c dmenu -a -l -a 20

    display the menu with rofi using its icon protocol:

        taverner menu -f '%t\0icon\037%c\n' -c rofi -a -dmenu -a -show-icons -a -theme-str -a 'element-icon{size:5em;}window{height:50%;}'

!
}

warn() {
    printf "%s: warning: $1" taverner "${@:2}" >&2
}

error() {
    printf "%s: error: $1" taverner "${@:2}" >&2
    exit 1
}

thumbnail() {
    if [[ $2 =~ [https?|f]tp ]]; then
        if COLUMNS=40 curl --remove-on-error -#Lgfo "$1"/cover.dl -- "$2"; then
            set -- "$1" "$1"/cover.dl
        else
            warn '%s: failed to download cover\n' "$2"
        fi
    fi

    if [[ -f $2 ]]; then
        magick -define filename:literal=true "$2" -thumbnail '200x250!' "$2".tmp || exit

        mv -f -- "$2".tmp "$1"/cover
        rm -f -- "$1"/cover.dl
    else
        error '%s: unable to find cover\n' "$2"
    fi
}

menu_usage() {
    cat <<'!'
usage: menu [-h] [-f fmt] [-c cmd] [-a arg]... [--] [arguments]...

description
    generate a menu, provide a prompt and execute selections

options
    -h         this help menu
    -f         printf-like formatter using placeholders %t as title and %c as cover (default: IMG:%c\t%t\n)
    -c cmd     menu command to use instead of dmenu (default: dmenu -i -w -ia top-gapless -is 200x250 -p LAUNCH)
    -a arg     each argument given to the menu command, can be repeated
    arguments  the arguments specified after -- are passed to each selected
               entry

notes
    the cmd used must return the title terminated with a <newline>.

!
}

menu_cmd() {
    local entry title dir cmd fmt='IMG:%c\t%t\n'
    local -a args menucmd=(dmenu -i -w -ia top-gapless -is 200x250 -p LAUNCH)
    local -A entries

    while getopts :hc:a:f: opt; do
        case $opt in
        h) menu_usage; exit ;;
        c) cmd=$OPTARG ;;
        a) args+=("$OPTARG") ;;
        f) fmt=$OPTARG ;;
        *) menu_usage >&2; exit 1
        esac
    done

    shift "$((OPTIND-1))"

    # N.B. To avoid repeated traversal and file reads cache the entries in a
    #      custom format which is recreated when the bindir is updated.
    #      The format is: title "\n" directory "\0"
    if [[ $datadir/menu -ot "$bindir" ]]; then
        for dir in "$bindir"/*/; do
            read -r title < "$dir"/title
            printf '%s\n%s\0' "$title" "$dir"
        done | sort -zt '/' -k 1,1 > "$datadir"/menu
    fi

    while IFS=$'\n' read -rd '' title dir; do
        if [[ ${entries[$title]} ]]; then
            warn '%s: %s and %s have the same title, skipping\n' "$title" "${entries[$title]##*/}" "${dir##*/}"
        else
            entries[$title]=$dir
        fi
    done < "$datadir"/menu

    interpolate() {
        local i cur peek out len=${#1} title=${2//[%\\]/&&} cover=${3//[%\\]/&&}

        # XXX This might eventually be too slow, however format strings tend to
        #     be very short.
        for (( i=0; i<len; ++i )); do
            cur=${1:i:1}
            peek=${1:i+1:1}

            case $cur$peek in
            %t) cur=$title; (( ++i )) ;;
            %c) cur=$cover; (( ++i )) ;;
            %%) cur=%%; (( ++i ))
            esac

            out+=$cur
        done

        # N.B. printf formatter is needed to handle the printing of NUL and
        #      used for any other c-style escapes.
        # shellcheck disable=SC2059
        printf "$out"
    }

    if [[ $cmd ]]; then
        menucmd=("$cmd" "${args[@]}")
    fi

    for title in "${!entries[@]}"; do
        interpolate "$fmt" "$title" "${entries[$title]}"/cover
    done \
    | "${menucmd[@]}" \
    | while read -r title; do
        if [[ $title ]]; then
            entry=${entries[$title]}/run

            if [[ -x $entry ]]; then
                "$entry" "$@" &
            elif [[ -f $entry ]]; then
                warn '%s: not executable\n' "$title"
            else
                warn '%s: no associated file\n' "$title"
            fi
        fi
    done
}

add_usage() {
    cat <<'!'
usage: add [-h] [-c cover] [-t template] [-n title] entry

description
    create a new menu entry

options
    -h           this help menu
    -t template  select a template to base the new entry on
    -c cover     path or url to a cover image
    -n title     media title to display
    entry        the name for the new launcher script

!
}

add_cmd() {
    local opt entry cover template

    while getopts :c:t:e:n:h opt; do
        case $opt in
        c) cover=$OPTARG ;;
        t) template=$OPTARG ;;
        n) title=$OPTARG ;;
        h) add_usage; exit ;;
        *) add_usage >&2; exit 1
        esac
    done

    shift "$((OPTIND-1))"

    title=${title:-$1}

    case $1 in
    '') error 'entry name required\n' ;;
    */*) error '%s: <slash> (/) not allowed in entry name\n' "$1" ;;
    *) entry=$bindir/$1
    esac

    if [[ -e $entry ]]; then
        error '%s: entry exists\n' "$entry"
    fi

    if [[ $template && ! -f $template ]]; then
        error '%s: no such template\n' "$template"
    fi

    mkdir -p -- "$entry"

    printf '%s\n' "$title" > "$entry"/title

    if [[ $cover ]]; then
        thumbnail "$entry" "$cover"
    fi

    if [[ $template ]]; then
        cp -f -- "$templatedir"/"$template" "$entry"/run
    else
        touch -- "$entry"/run
    fi

    $editor "$entry"/run
    chmod -c -- +x "$entry"/run
}

edit_usage() {
    cat <<'!'
usage: edit [-c cover] [-n title] entry
       edit [-t] [-n title] entry
       edit [-n title] entry

description
    edit the selected entry

options
    -c cover  path or url to cover for the entry
    -n title  specify the title for the entry title
    -t        assumes entry refers to a template
    entry     attempts to open the entry with EDITOR (default: vi)

!
}

edit_cmd() {
    local entry cover template

    while getopts :c:n:ht opt; do
        case $opt in
        t) template=1 ;;
        c) cover=$OPTARG ;;
        n) title=$OPTARG ;;
        h) edit_usage; exit ;;
        *) edit_usage >&2; exit 1
        esac
    done

    shift "$((OPTIND-1))"

    if [[ $template ]]; then
        entry=$templatedir/$1
    else
        entry=$bindir/$1
    fi

    if [[ ! -e "$entry" ]]; then
        error '%s: no such entry\n' "$1"
    fi

    if [[ $template ]]; then
        $editor "$entry"
    else
        if [[ $title ]]; then
            printf '%s\n' "$title" > "$entry"/title
        fi

        if [[ $cover ]]; then
            thumbnail "$entry" "$cover"
        else
            $editor "$entry"/run
        fi
    fi

    touch -- "$bindir"
}

ls_usage() {
    cat <<!
usage: ls [-ht0]

description
    list entries and templates

options
    -h  this help menu
    -t  list templates instead of entries
    -0  use NUL instead of a <newline> between items

!
}

ls_cmd() {
    local opt dir=$bindir fmt='%s\n'

    while getopts :th0 opt; do
        case $opt in
        t) dir=$templatedir ;;
        0) fmt='%s\0' ;;
        h) ls_usage; exit ;;
        *) ls_usage >&2; exit 1 ;;
        esac
    done

    set -- "$dir"/*

    if [[ $# -gt 0 ]]; then
        # shellcheck disable=SC2059
        printf "$fmt" "${@##*/}"
    fi
}

rm_usage() {
    cat <<!
usage: rm [-h] entry...

description
    remove selected entries and corresponding covers

options
    -h      this help menu
    entry   the chosen entry to remove

!
}

rm_cmd() {
    local opt entry

    while getopts :h opt; do
        case $opt in
        h) rm_usage; exit ;;
        *) rm_usage >&2; exit 1
        esac
    done

    shift "$((OPTIND-1))"

    if [[ $# -eq 0 ]]; then
        error 'no entry provided\n'
    fi

    for entry do
        if [[ -e "$bindir"/"$entry" ]]; then
            set -- "$@" "$bindir"/"$entry"
        else
            warn '%s: no such entry\n' "$entry"
        fi

        shift
    done

    # N.B. Avoid ARG_MAX via xargs while using awk to prune duplicates.
    gawk '
        BEGIN {
            for(i=2; i<ARGC; ++i)
                if(!s[ARGV[i]]++)
                    printf "%s\0", ARGV[i]
        }' -- "$@" \
    | xargs -r0 rm -rf --
}

datadir=${XDG_DATA_HOME:-$HOME/.local/share}/taverner

bindir=$datadir/bin
templatedir=$datadir/templates

editor=${EDITOR:-vi}

while getopts :he: opt; do
    case $opt in
    e)
        editor=$OPTARG
    ;;
    h)
        usage

        printf 'sub-commands\n'

        for cmd in menu add edit ls rm; do
            printf '%s\n' "$cmd"
            "$cmd"_usage | pr -to 4
        done | pr -to 4

        exit
    ;;
    *)
        usage >&2
        exit 1
    esac
done

shift "$((OPTIND-1))"

mkdir -p -- "$bindir" "$templatedir" || exit

# N.B. Reset OPTIND for subsequent calls to getopts.
OPTIND=1

case $1 in
menu|add|edit|ls|rm) cmd=$1; shift; "$cmd"_cmd "$@" ;;
*) usage; exit 1
esac
