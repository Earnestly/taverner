#!/usr/bin/env bash
# barkeep
# Creates a game entry based on a template for use with `taverner`

# Options
shopt -s nullglob

# Globals
readonly progn=barkeep
readonly datadir="${XDG_DATA_HOME:-$HOME/.local/share}"
readonly prefix="$datadir"/taverner
readonly bindir="$prefix"/bin
readonly coverdir="$prefix"/covers
readonly templatedir="$prefix"/templates

readonly TMPDIR=/tmp

usage_mk() {
    cat <<EOF
Create a new menu entry.

    mk <entry> -t <template> [-c <cover>] [-e <editor>]
        -t      Select a template to base the new entry on.
        -c      Path or url to a cover image (note: this is destructive).
        -e      Prefered editor, uses \$EDITOR if not set.
        entry   The name for the new launcher script.

EOF
}

usage_ls() {
    cat <<EOF
List entries and templates.

    ls [-t]
        -t      List all available templates.

        If no arguments given this will list all entries.

EOF
}

usage_ed() {
    cat <<EOF
Edit the selected entry or template.

    ed [-t <template>] [-e <editor>] [-c <cover>] [entry]
        -t      Attempts to open the template with \$EDITOR.
        -c      Replace the cover for entry, note that the entry is required
                for this operation.
        -e      Prefered editor, uses \$EDITOR if not set.
        entry   Edit the selected entry.

        Note: Only one operation is possible per innvocation.

EOF
}

usage_rm() {
    cat <<EOF
Remove selected entries and corresponding covers.

    rm [entry [entry]]
        If no argument given, attempt to remove all entires.

EOF
}

usage() {
    cat <<EOF
Usage: barkeep [-h] mk | ls | ed | rm
    Each mode has an -h flag which produces a summary of its help section.

EOF

usage_mk
usage_ls
usage_ed
usage_rm

    cat <<EOF
Examples:
    # Creates an entry using the psx template called wipeout_3 using emacs
    # as the editor.
    barkeep mk -e emacs -t psx -c ~/wipeout.png wipeout_3

    # Removes both wipeout_3 and crash_bandicoot launchers along with any
    # cover images if found.
    barkeep rm wipeout_3 crash_bandicoot

EOF
}

puts() {
    printf -- "$1\n" "${@:2}"
}

err() {
    puts "$progn: $@" >&2
}

confirm() {
    local msg="$1"
    local -l reply

    read -p "$msg [Y/n] " reply

    # If the reply is empty, assume Y
    if [[ -z "$reply" || "$reply" = y?(es) ]]; then
        return 0
    else
        return 1
    fi
}

handle_ls() {
    while (($#)); do
        case $1 in
            -t) ls_templates; exit ;;
            -h) usage_ls; exit ;;
            *)  err '%s: Unrecognised argument.' "$1"
                usage_ls; exit 1 ;;
        esac
        shift
    done
    ls_entries
}

ls_entries() {
    #global bindir
    local entries

    entries=("$bindir"/*)

    if [[ -n "$entries" ]]; then
        puts 'Current entries:'
        puts '%s' "${entries[@]##*/}"
        puts ""
    else
        err '%s: No entries found.' "$entries"
    fi
}

ls_templates() {
    #global templatedir
    local templates

    templates=("$templatedir"/*)

    if [[ -n "$templates" ]]; then
        puts 'Available templates:'
        puts '%s' "${templates[@]##*/}"
        puts ""
    else
        err '%s: No templates found.' "$templatedir"
    fi
}

handle_mk() {
    #global bindir templatedir coverdir EDITOR progn
    local entry cover template editor

    while (($#)); do
        case $1 in
            -c) shift; cover="$1" ;;
            -t) shift; template="$1" ;;
            -e) shift; editor="$1" ;;
            -h) usage_mk; exit ;;
            *) entry="$1"
        esac
        shift
    done

    if [[ -z "$entry" ]]; then
        err 'An entry name is required.'
        usage_mk
        exit 1
    fi

    if [[ -e "$bindir"/"$entry" ]]; then
        err '%s: This entry already exists.  See `%s ls -e`.' "$bindir"/"$entry" "$progn"
        exit 1
    fi

    if [[ -z "$template" ]]; then
        err 'A template required.  See `%s ls -t`.' "$progn"
        usage_mk
        exit 1
    fi

    if [[ ! -e "$templatedir"/"$template" ]]; then
        err '%s: Unable to find requested template.' "$templatedir"/"$template"
        exit 1
    fi

    if [[ -z "$cover" ]]; then
        cover="$coverdir"/placeholder
    else
        mk_cover "$entry" "$cover"
    fi

    mk_entry "$editor" "$bindir"/"$entry" "$templatedir"/"$template"
}

mk_entry() {
    local editor="$1"
    local entry="$2"
    local template="$3"

    cp -fv -- "$template" "$entry"
    command "${editor:-${EDITOR:-vi}}" "$entry"
    chmod -c +x -- "$entry"
}

mk_cover() {
    #global TMPDIR coverdir
    local entry="$1"
    local cover="$2"

    if [[ "$cover" =~ [https?\|f]tp ]]; then
        if curl -#o "$TMPDIR"/barkeep_cover "$cover"; then
            cover="$TMPDIR"/barkeep_cover
        else
            err '%s: Failed to download cover.' "$cover"
            exit 1
        fi
    fi

    if [[ -e "$cover" ]]; then
        command convert "$cover" -resize 368x527\! "$cover"
        mv -fv -- "$cover" "$coverdir"/"$entry"
    else
        err '%s: I lost the cover image :-(.' "$cover"
    fi
}

handle_rm() {
    local entry entries remove

    while (($#)); do
        case $1 in
            -h) usage_rm; exit ;;
            *)  entries+=("$1")
        esac
        shift
    done

    if [[ -z "${entries[@]}" ]]; then
        entries=("$bindir"/*)
        entries="${entries[@]##$bindir/}"

        if [[ -z "${entries[@]}" ]]; then
            err '%s: Nothing here to remove.' "$bindir"
            exit 1
        fi
    fi

    puts 'Attempting to remove the following launchers:'
    puts '%s' "${entries[@]}"

    if ! confirm "Continue?"; then
        puts 'Nothing removed.'
        exit
    fi

    for entry in "${entries[@]}"; do
        if [[ -e "$bindir"/"$entry" ]]; then
            remove+=("$bindir"/"$entry")
        fi

        if [[ -e "$coverdir"/"$entry" ]]; then
            remove+=("$coverdir"/"$entry")
        fi
    done

    rm -fv -- "${remove[@]}"
}

handle_ed() {
    #global bindir templatedir coverdir EDITOR progn
    local entry cover template editor

    while (($#)); do
        case $1 in
            -c) shift; cover="$1" ;;
            -t) shift; template="$1" ;;
            -e) shift; editor="$1" ;;
            -h) usage_ed; exit ;;
            *) entry="$1"
        esac
        shift
    done

    if [[ -n "$entry" && -n "$cover" ]]; then
        mk_cover "$entry" "$cover"
        exit
    fi

    if [[ -n "$template" && -e "$templatedir"/"$template" ]]; then
        command -- "${editor:-${EDITOR:-vi}}" "$templatedir"/"$template"
        exit
    fi

    if [[ -n "$entry" && -e "$bindir"/"$entry" ]]; then
        command -- "${editor:-${EDITOR:-vi}}" "$bindir"/"$entry"
        exit
    fi
}

mkdir -p "$datadir" "$bindir" "$coverdir" "$templatedir"

if (($# == 0)); then
    err 'At least one argument is required.'
    usage
    exit 1
fi

while (($#)); do
    case $1 in
        ed) shift; handle_ed "$@"
            exit ;;
        ls) shift; handle_ls "$@"
            exit ;;
        mk) shift; handle_mk "$@"
            exit ;;
        rm) shift; handle_rm "$@"
            exit ;;
        -h) usage
            exit ;;
        *)  err '%s: Unrecognised argument.' "$1"
            usage
            exit 1
    esac
    shift
done
